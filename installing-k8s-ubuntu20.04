#For the control-plane node, run the following command to set up the system hostname to "cplane1".
sudo hostnamectl set-hostname cplane1

#For Kubernetes worker nodes, run the following hostnamectl command.
# setup hostname worker1
sudo hostnamectl set-hostname worker1
# setup hostname worker2
sudo hostnamectl set-hostname worker2

#Next, modify the /etc/hosts file on all servers using the following command.
sudo nano /etc/hosts
#Add the following configuration to the file. Be sure each hostname is pointed to the correct IP address.
192.168.5.10 cplane1
192.168.5.25 worker1
192.168.5.26 worker2

#Configuring UFW Firewall
#On the control-plane node "cplane1", run the following ufw command to open ports.
sudo ufw allow "OpenSSH"
sudo ufw enable
sudo ufw allow 6443/tcp
sudo ufw allow 2379:2380/tcp
sudo ufw allow 10250/tcp
sudo ufw allow 10259/tcp
sudo ufw allow 10257/tcp
sudo ufw status

#On worker nodes "worker1" and "worker2", run the following ufw command to open some ports.
sudo ufw allow 10250/tcp
sudo ufw allow 30000:32767/tcp
sudo ufw status

#Enable Kernel Modules and Disable SWAP
sudo modprobe overlay
sudo modprobe br_netfilter
cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF
cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables  = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward                 = 1
EOF
sudo sysctl --system
sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab
sudo nano /etc/fstab
sudo swapoff -a
free -m

#Installing Container Runtime: Containerd
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker.gpg
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt update
sudo apt install containerd.io
sudo systemctl stop containerd
#Back up the default containerd configuration and generate a new fresh one using the following command.
sudo mv /etc/containerd/config.toml /etc/containerd/config.toml.orig
sudo containerd config default > /etc/containerd/config.toml
#Now modify the containerd config file "/etc/containerd/config.toml" using the following command.
#"SystemdCgroup = false" to "SystemdCgroup = true"
sudo nano /etc/containerd/config.toml
sudo systemctl start containerd
sudo systemctl is-enabled containerd
sudo systemctl status containerd

#Installing Kubernetes Package
sudo apt install apt-transport-https ca-certificates curl -y
sudo curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg
echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
sudo apt update
sudo apt install kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl

#Installing CNI (Container Network Interface) Plugin: Flannel
sudo mkdir -p /opt/bin/
sudo curl -fsSLo /opt/bin/flanneld https://github.com/flannel-io/flannel/releases/download/v0.19.0/flanneld-amd64
sudo chmod +x /opt/bin/flanneld

#Initializing Kubernetes Control Plane
lsmod | grep br_netfilter
sudo kubeadm config images pull
sudo kubeadm init --pod-network-cidr=10.244.0.0/16 \
--apiserver-advertise-address=192.168.216.130 \
--cri-socket=unix:///run/containerd/containerd.sock
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config
kubectl cluster-info
kubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml
kubectl get pods --all-namespaces

#Adding Worker Nodes to Kubernetes
kubeadm join 192.168.5.10:6443 --token po3sb1.oux4z76nwb0veuna \
--discovery-token-ca-cert-hash sha256:f5068150fabaf85f3d04e19a395c60d19298ba441e2d9391e20df3267ea6cd28
kubectl get nodes -o wide

#Change worker node role

kubectl label node k8sworker node-role.kubernetes.io/worker=worker

